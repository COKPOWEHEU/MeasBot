
main.elf:     формат файла elf32-avr

Разделы:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000c44  00000cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000014d  00800076  00800076  00000cee  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000d40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000190d  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b66  00000000  00000000  000026cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f8  00000000  00000000  00003233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  0000432c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bd  00000000  00000000  00004530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001018  00000000  00000000  00004ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00005d05  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
   0:	c0 c0       	rjmp	.+384    	; 0x182 <__ctors_end>
   2:	a4 c4       	rjmp	.+2376   	; 0x94c <__vector_1>
   4:	d9 c0       	rjmp	.+434    	; 0x1b8 <__bad_interrupt>
   6:	d8 c0       	rjmp	.+432    	; 0x1b8 <__bad_interrupt>
   8:	d7 c0       	rjmp	.+430    	; 0x1b8 <__bad_interrupt>
   a:	d6 c0       	rjmp	.+428    	; 0x1b8 <__bad_interrupt>
   c:	d5 c0       	rjmp	.+426    	; 0x1b8 <__bad_interrupt>
   e:	d4 c0       	rjmp	.+424    	; 0x1b8 <__bad_interrupt>
  10:	d3 c0       	rjmp	.+422    	; 0x1b8 <__bad_interrupt>
  12:	d2 c0       	rjmp	.+420    	; 0x1b8 <__bad_interrupt>
  14:	d1 c0       	rjmp	.+418    	; 0x1b8 <__bad_interrupt>
  16:	d0 c0       	rjmp	.+416    	; 0x1b8 <__bad_interrupt>
  18:	cf c0       	rjmp	.+414    	; 0x1b8 <__bad_interrupt>
  1a:	ce c0       	rjmp	.+412    	; 0x1b8 <__bad_interrupt>
  1c:	cd c0       	rjmp	.+410    	; 0x1b8 <__bad_interrupt>
  1e:	cc c0       	rjmp	.+408    	; 0x1b8 <__bad_interrupt>
  20:	cb c0       	rjmp	.+406    	; 0x1b8 <__bad_interrupt>
  22:	ca c0       	rjmp	.+404    	; 0x1b8 <__bad_interrupt>
  24:	c9 c0       	rjmp	.+402    	; 0x1b8 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	06 00       	.word	0x0006	; ????
  28:	ff 09       	sbc	r31, r15
  2a:	01 a1       	ldd	r16, Z+33	; 0x21
  2c:	01 85       	ldd	r16, Z+9	; 0x09
  2e:	01 15       	cp	r16, r1
  30:	00 26       	eor	r0, r16
  32:	ff 00       	.word	0x00ff	; ????
  34:	75 08       	sbc	r7, r5
  36:	95 02       	muls	r25, r21
  38:	09 00       	.word	0x0009	; ????
  3a:	b2 02       	muls	r27, r18
  3c:	01 c0       	rjmp	.+2      	; 0x40 <__SREG__+0x1>
  3e:	06 00       	.word	0x0006	; ????
  40:	ff 09       	sbc	r31, r15
  42:	01 a1       	ldd	r16, Z+33	; 0x21
  44:	01 85       	ldd	r16, Z+9	; 0x09
  46:	02 15       	cp	r16, r2
  48:	00 26       	eor	r0, r16
  4a:	ff 00       	.word	0x00ff	; ????
  4c:	75 08       	sbc	r7, r5
  4e:	95 08       	sbc	r9, r5
  50:	09 00       	.word	0x0009	; ????
  52:	b2 02       	muls	r27, r18
  54:	01 c0       	rjmp	.+2      	; 0x58 <__SREG__+0x19>
  56:	06 00       	.word	0x0006	; ????
  58:	ff 09       	sbc	r31, r15
  5a:	01 a1       	ldd	r16, Z+33	; 0x21
  5c:	01 85       	ldd	r16, Z+9	; 0x09
  5e:	03 15       	cp	r16, r3
  60:	00 26       	eor	r0, r16
  62:	ff 00       	.word	0x00ff	; ????
  64:	75 08       	sbc	r7, r5
  66:	95 02       	muls	r25, r21
  68:	09 00       	.word	0x0009	; ????
  6a:	b2 02       	muls	r27, r18
  6c:	01 c0       	rjmp	.+2      	; 0x70 <__SREG__+0x31>
  6e:	06 00       	.word	0x0006	; ????
  70:	ff 09       	sbc	r31, r15
  72:	01 a1       	ldd	r16, Z+33	; 0x21
  74:	01 85       	ldd	r16, Z+9	; 0x09
  76:	04 15       	cp	r16, r4
  78:	00 26       	eor	r0, r16
  7a:	ff 00       	.word	0x00ff	; ????
  7c:	75 08       	sbc	r7, r5
  7e:	95 02       	muls	r25, r21
  80:	09 00       	.word	0x0009	; ????
  82:	b2 02       	muls	r27, r18
  84:	01 c0       	rjmp	.+2      	; 0x88 <__SREG__+0x49>
  86:	06 00       	.word	0x0006	; ????
  88:	ff 09       	sbc	r31, r15
  8a:	01 a1       	ldd	r16, Z+33	; 0x21
  8c:	01 85       	ldd	r16, Z+9	; 0x09
  8e:	05 15       	cp	r16, r5
  90:	00 26       	eor	r0, r16
  92:	ff 00       	.word	0x00ff	; ????
  94:	75 08       	sbc	r7, r5
  96:	95 03       	fmuls	r17, r21
  98:	09 00       	.word	0x0009	; ????
  9a:	b2 02       	muls	r27, r18
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <__SREG__+0x61>
  9e:	06 00       	.word	0x0006	; ????
  a0:	ff 09       	sbc	r31, r15
  a2:	01 a1       	ldd	r16, Z+33	; 0x21
  a4:	01 85       	ldd	r16, Z+9	; 0x09
  a6:	06 15       	cp	r16, r6
  a8:	00 26       	eor	r0, r16
  aa:	ff 00       	.word	0x00ff	; ????
  ac:	75 08       	sbc	r7, r5
  ae:	95 04       	cpc	r9, r5
  b0:	09 00       	.word	0x0009	; ????
  b2:	b2 02       	muls	r27, r18
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <__SREG__+0x79>
  b6:	06 00       	.word	0x0006	; ????
  b8:	ff 09       	sbc	r31, r15
  ba:	01 a1       	ldd	r16, Z+33	; 0x21
  bc:	01 85       	ldd	r16, Z+9	; 0x09
  be:	07 15       	cp	r16, r7
  c0:	00 26       	eor	r0, r16
  c2:	ff 00       	.word	0x00ff	; ????
  c4:	75 08       	sbc	r7, r5
  c6:	95 05       	cpc	r25, r5
  c8:	09 00       	.word	0x0009	; ????
  ca:	b2 02       	muls	r27, r18
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <__SREG__+0x91>
  ce:	06 00       	.word	0x0006	; ????
  d0:	ff 09       	sbc	r31, r15
  d2:	01 a1       	ldd	r16, Z+33	; 0x21
  d4:	01 85       	ldd	r16, Z+9	; 0x09
  d6:	08 15       	cp	r16, r8
  d8:	00 26       	eor	r0, r16
  da:	ff 00       	.word	0x00ff	; ????
  dc:	75 08       	sbc	r7, r5
  de:	95 06       	cpc	r9, r21
  e0:	09 00       	.word	0x0009	; ????
  e2:	b2 02       	muls	r27, r18
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <__SREG__+0xa9>
  e6:	06 00       	.word	0x0006	; ????
  e8:	ff 09       	sbc	r31, r15
  ea:	01 a1       	ldd	r16, Z+33	; 0x21
  ec:	01 85       	ldd	r16, Z+9	; 0x09
  ee:	09 15       	cp	r16, r9
  f0:	00 26       	eor	r0, r16
  f2:	ff 00       	.word	0x00ff	; ????
  f4:	75 08       	sbc	r7, r5
  f6:	95 07       	cpc	r25, r21
  f8:	09 00       	.word	0x0009	; ????
  fa:	b2 02       	muls	r27, r18
  fc:	01 c0       	rjmp	.+2      	; 0x100 <__SREG__+0xc1>
  fe:	06 00       	.word	0x0006	; ????
 100:	ff 09       	sbc	r31, r15
 102:	01 a1       	ldd	r16, Z+33	; 0x21
 104:	01 85       	ldd	r16, Z+9	; 0x09
 106:	0a 15       	cp	r16, r10
 108:	00 26       	eor	r0, r16
 10a:	ff 00       	.word	0x00ff	; ????
 10c:	75 08       	sbc	r7, r5
 10e:	95 08       	sbc	r9, r5
 110:	09 00       	.word	0x0009	; ????
 112:	b2 02       	muls	r27, r18
 114:	01 c0       	rjmp	.+2      	; 0x118 <usbDescriptorConfiguration+0x2>

00000116 <usbDescriptorConfiguration>:
 116:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
 126:	00 00 09 21 01 01 00 01 22 f0 00 07 05 81 03 08     ...!....".......
 136:	00 64                                               .d

00000138 <usbDescriptorDevice>:
 138:	12 01 10 01 00 00 00 08 c0 16 df 05 00 01 01 02     ................
 148:	00 01                                               ..

0000014a <usbDescriptorStringDevice>:
 14a:	1e 03 48 00 49 00 44 00 20 00 44 00 69 00 67 00     ..H.I.D. .D.i.g.
 15a:	6f 00 75 00 74 00 20 00 33 00 78 00 34 00           o.u.t. .3.x.4.

00000168 <usbDescriptorStringVendor>:
 168:	16 03 43 00 4f 00 4b 00 50 00 4f 00 57 00 45 00     ..C.O.K.P.O.W.E.
 178:	48 00 45 00 55 00                                   H.E.U.

0000017e <usbDescriptorString0>:
 17e:	04 03 09 04                                         ....

00000182 <__ctors_end>:
 182:	11 24       	eor	r1, r1
 184:	1f be       	out	0x3f, r1	; 63
 186:	cf e5       	ldi	r28, 0x5F	; 95
 188:	d4 e0       	ldi	r29, 0x04	; 4
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	cd bf       	out	0x3d, r28	; 61

0000018e <__do_copy_data>:
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	a0 e6       	ldi	r26, 0x60	; 96
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e4 e4       	ldi	r30, 0x44	; 68
 196:	fc e0       	ldi	r31, 0x0C	; 12
 198:	02 c0       	rjmp	.+4      	; 0x19e <__do_copy_data+0x10>
 19a:	05 90       	lpm	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	a6 37       	cpi	r26, 0x76	; 118
 1a0:	b1 07       	cpc	r27, r17
 1a2:	d9 f7       	brne	.-10     	; 0x19a <__do_copy_data+0xc>

000001a4 <__do_clear_bss>:
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	a6 e7       	ldi	r26, 0x76	; 118
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
 1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
 1ae:	a3 3c       	cpi	r26, 0xC3	; 195
 1b0:	b2 07       	cpc	r27, r18
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>
 1b4:	ec d4       	rcall	.+2520   	; 0xb8e <main>
 1b6:	44 c5       	rjmp	.+2696   	; 0xc40 <_exit>

000001b8 <__bad_interrupt>:
 1b8:	23 cf       	rjmp	.-442    	; 0x0 <__vectors>

000001ba <uart_config>:
}uart_buffer;

static uart_buffer uart_rx;
static uart_buffer uart_tx;

void uart_config(uint32_t baud, uint8_t stop, uint8_t parity, uint8_t wordsize){
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	6b 01       	movw	r12, r22
 1ca:	7c 01       	movw	r14, r24
 1cc:	d4 2f       	mov	r29, r20
 1ce:	c2 2f       	mov	r28, r18
  uint16_t ubrr = (F_CPU/baud - (8 - 4)) / 8;
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	74 e2       	ldi	r23, 0x24	; 36
 1d4:	84 ef       	ldi	r24, 0xF4	; 244
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	a7 01       	movw	r20, r14
 1da:	96 01       	movw	r18, r12
 1dc:	0f d5       	rcall	.+2590   	; 0xbfc <__udivmodsi4>
 1de:	da 01       	movw	r26, r20
 1e0:	c9 01       	movw	r24, r18
 1e2:	04 97       	sbiw	r24, 0x04	; 4
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	ac 01       	movw	r20, r24
 1ea:	bd 01       	movw	r22, r26
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	76 95       	lsr	r23
 1f0:	67 95       	ror	r22
 1f2:	57 95       	ror	r21
 1f4:	47 95       	ror	r20
 1f6:	8a 95       	dec	r24
 1f8:	d1 f7       	brne	.-12     	; 0x1ee <uart_config+0x34>
  UBRRH = 0x0F & (char)(ubrr>>8);
 1fa:	85 2f       	mov	r24, r21
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	80 bd       	out	0x20, r24	; 32
  UBRRL = (char)ubrr;
 200:	49 b9       	out	0x09, r20	; 9
  uint8_t csrc = (1<<URSEL);
  if(stop == 2)csrc |= (1<<USBS);
 202:	d2 30       	cpi	r29, 0x02	; 2
 204:	11 f4       	brne	.+4      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 206:	88 e8       	ldi	r24, 0x88	; 136
 208:	01 c0       	rjmp	.+2      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>

void uart_config(uint32_t baud, uint8_t stop, uint8_t parity, uint8_t wordsize){
  uint16_t ubrr = (F_CPU/baud - (8 - 4)) / 8;
  UBRRH = 0x0F & (char)(ubrr>>8);
  UBRRL = (char)ubrr;
  uint8_t csrc = (1<<URSEL);
 20a:	80 e8       	ldi	r24, 0x80	; 128
  if(stop == 2)csrc |= (1<<USBS);
  if(parity == 1){
 20c:	c1 30       	cpi	r28, 0x01	; 1
 20e:	11 f4       	brne	.+4      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
    csrc |= (1<<UPM0) | (1<<UPM1);
 210:	80 63       	ori	r24, 0x30	; 48
 212:	03 c0       	rjmp	.+6      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
  }else if(parity == 2){
 214:	c2 30       	cpi	r28, 0x02	; 2
 216:	09 f4       	brne	.+2      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
    csrc |= (1<<UPM1);
 218:	80 62       	ori	r24, 0x20	; 32
  }
  switch(wordsize){
 21a:	06 30       	cpi	r16, 0x06	; 6
 21c:	31 f0       	breq	.+12     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 21e:	07 30       	cpi	r16, 0x07	; 7
 220:	31 f0       	breq	.+12     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 222:	05 30       	cpi	r16, 0x05	; 5
 224:	29 f0       	breq	.+10     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
    case 5:  csrc |= (0<<UCSZ1) | (0<<UCSZ0); break;
    case 6:  csrc |= (0<<UCSZ1) | (1<<UCSZ0); break;
    case 7:  csrc |= (1<<UCSZ1) | (0<<UCSZ0); break;
    default: csrc |= (1<<UCSZ1) | (1<<UCSZ0); break;
 226:	86 60       	ori	r24, 0x06	; 6
 228:	03 c0       	rjmp	.+6      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
  }else if(parity == 2){
    csrc |= (1<<UPM1);
  }
  switch(wordsize){
    case 5:  csrc |= (0<<UCSZ1) | (0<<UCSZ0); break;
    case 6:  csrc |= (0<<UCSZ1) | (1<<UCSZ0); break;
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	01 c0       	rjmp	.+2      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
    case 7:  csrc |= (1<<UCSZ1) | (0<<UCSZ0); break;
 22e:	84 60       	ori	r24, 0x04	; 4
    default: csrc |= (1<<UCSZ1) | (1<<UCSZ0); break;
  }
  UCSRC = csrc;
 230:	80 bd       	out	0x20, r24	; 32
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	08 95       	ret

00000242 <uart_init>:

void uart_init( uint32_t baud ){
 242:	0f 93       	push	r16
  DDR_1( UART_TX );
 244:	89 9a       	sbi	0x11, 1	; 17
  DDR_0( UART_RX );
 246:	88 98       	cbi	0x11, 0	; 17
  PORT_1( UART_TX );
 248:	91 9a       	sbi	0x12, 1	; 18
  PORT_1( UART_RX );
 24a:	90 9a       	sbi	0x12, 0	; 18
  
  UCSRA = (1<<U2X);
 24c:	22 e0       	ldi	r18, 0x02	; 2
 24e:	2b b9       	out	0x0b, r18	; 11
  UCSRB = (1<<RXEN | 1<<TXEN);
 250:	28 e1       	ldi	r18, 0x18	; 24
 252:	2a b9       	out	0x0a, r18	; 10
  uart_config(baud, 1, 0, 8);
 254:	08 e0       	ldi	r16, 0x08	; 8
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	af df       	rcall	.-162    	; 0x1ba <uart_config>
  //UCSRC = (1<<URSEL | 1<<UCSZ1 | 1<<UCSZ0);
  uart_rx.st=0; uart_rx.en=0; uart_tx.st=0; uart_tx.en=0;
 25c:	ea e0       	ldi	r30, 0x0A	; 10
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	10 82       	st	Z, r1
 262:	11 82       	std	Z+1, r1	; 0x01
 264:	e8 e8       	ldi	r30, 0x88	; 136
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	10 82       	st	Z, r1
 26a:	11 82       	std	Z+1, r1	; 0x01
  (void)UDR; //void reading UDR
 26c:	8c b1       	in	r24, 0x0c	; 12
}
 26e:	0f 91       	pop	r16
 270:	08 95       	ret

00000272 <uart_size>:

unsigned char uart_size( uart_buffer *buf ){
 272:	fc 01       	movw	r30, r24
  return ((buf->en - buf->st) & UART_MASK);
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	80 81       	ld	r24, Z
 278:	98 1b       	sub	r25, r24
 27a:	89 2f       	mov	r24, r25
}
 27c:	8f 77       	andi	r24, 0x7F	; 127
 27e:	08 95       	ret

00000280 <uart_buf_read>:

char uart_buf_read( uart_buffer *buf ){
 280:	fc 01       	movw	r30, r24
  uart_rx.st=0; uart_rx.en=0; uart_tx.st=0; uart_tx.en=0;
  (void)UDR; //void reading UDR
}

unsigned char uart_size( uart_buffer *buf ){
  return ((buf->en - buf->st) & UART_MASK);
 282:	81 81       	ldd	r24, Z+1	; 0x01
 284:	90 81       	ld	r25, Z
}

char uart_buf_read( uart_buffer *buf ){
  char res;
  if(uart_size(buf) == 0)return 0;
 286:	89 1b       	sub	r24, r25
 288:	8f 77       	andi	r24, 0x7F	; 127
 28a:	69 f0       	breq	.+26     	; 0x2a6 <uart_buf_read+0x26>
  res = buf->arr[buf->st];
 28c:	80 81       	ld	r24, Z
 28e:	df 01       	movw	r26, r30
 290:	a8 0f       	add	r26, r24
 292:	b1 1d       	adc	r27, r1
 294:	12 96       	adiw	r26, 0x02	; 2
 296:	8c 91       	ld	r24, X
  buf->st++;
 298:	90 81       	ld	r25, Z
 29a:	9f 5f       	subi	r25, 0xFF	; 255
 29c:	90 83       	st	Z, r25
  buf->st &= UART_MASK;
 29e:	90 81       	ld	r25, Z
 2a0:	9f 77       	andi	r25, 0x7F	; 127
 2a2:	90 83       	st	Z, r25
 2a4:	08 95       	ret
  return ((buf->en - buf->st) & UART_MASK);
}

char uart_buf_read( uart_buffer *buf ){
  char res;
  if(uart_size(buf) == 0)return 0;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
  res = buf->arr[buf->st];
  buf->st++;
  buf->st &= UART_MASK;
  return res;
}
 2a8:	08 95       	ret

000002aa <uart_buf_write>:

void uart_buf_write( uart_buffer *buf,char dat ){
 2aa:	fc 01       	movw	r30, r24
  uart_rx.st=0; uart_rx.en=0; uart_tx.st=0; uart_tx.en=0;
  (void)UDR; //void reading UDR
}

unsigned char uart_size( uart_buffer *buf ){
  return ((buf->en - buf->st) & UART_MASK);
 2ac:	81 81       	ldd	r24, Z+1	; 0x01
 2ae:	90 81       	ld	r25, Z
  buf->st &= UART_MASK;
  return res;
}

void uart_buf_write( uart_buffer *buf,char dat ){
  if(uart_size(buf) < UART_MASK){
 2b0:	89 1b       	sub	r24, r25
 2b2:	8f 77       	andi	r24, 0x7F	; 127
 2b4:	8f 37       	cpi	r24, 0x7F	; 127
 2b6:	61 f0       	breq	.+24     	; 0x2d0 <uart_buf_write+0x26>
    buf->arr[buf->en]=dat;
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	df 01       	movw	r26, r30
 2bc:	a8 0f       	add	r26, r24
 2be:	b1 1d       	adc	r27, r1
 2c0:	12 96       	adiw	r26, 0x02	; 2
 2c2:	6c 93       	st	X, r22
    buf->en++; buf->en &= UART_MASK;
 2c4:	81 81       	ldd	r24, Z+1	; 0x01
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	81 83       	std	Z+1, r24	; 0x01
 2ca:	81 81       	ldd	r24, Z+1	; 0x01
 2cc:	8f 77       	andi	r24, 0x7F	; 127
 2ce:	81 83       	std	Z+1, r24	; 0x01
 2d0:	08 95       	ret

000002d2 <uart_scan>:
#define uart_getc()		uart_buf_read(&uart_rx)
#define uart_free() (UART_MASK - uart_size(&uart_tx))
#define uart_full() (uart_size(&uart_tx)==UART_MASK)

char uart_scan( void ){
  return uart_rx.arr[uart_rx.st];
 2d2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <uart_rx>
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	e6 5f       	subi	r30, 0xF6	; 246
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	82 81       	ldd	r24, Z+2	; 0x02
}
 2de:	08 95       	ret

000002e0 <uart_putc>:

void uart_putc( char ch ){
  uart_buf_write( &uart_tx, ch );
 2e0:	68 2f       	mov	r22, r24
 2e2:	88 e8       	ldi	r24, 0x88	; 136
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	e1 cf       	rjmp	.-62     	; 0x2aa <uart_buf_write>

000002e8 <uart_puts>:
}

void uart_puts( char *str ){
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
  while(str[0]){
 2ee:	69 91       	ld	r22, Y+
 2f0:	66 23       	and	r22, r22
 2f2:	21 f0       	breq	.+8      	; 0x2fc <uart_puts+0x14>
    uart_buf_write( &uart_tx, str[0] );
 2f4:	88 e8       	ldi	r24, 0x88	; 136
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	d8 df       	rcall	.-80     	; 0x2aa <uart_buf_write>
 2fa:	f9 cf       	rjmp	.-14     	; 0x2ee <uart_puts+0x6>
    str++;
  }
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <uart_putx>:

void uart_putx( unsigned char x ){
 302:	cf 93       	push	r28
  unsigned char lb = x & 0x0F;
 304:	c8 2f       	mov	r28, r24
 306:	cf 70       	andi	r28, 0x0F	; 15
  x >>=4;
 308:	82 95       	swap	r24
 30a:	8f 70       	andi	r24, 0x0F	; 15
  if(x <= 9)uart_putc( x+'0' ); else uart_putc( x+'A'-0x0A);
 30c:	8a 30       	cpi	r24, 0x0A	; 10
 30e:	10 f4       	brcc	.+4      	; 0x314 <uart_putx+0x12>
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	01 c0       	rjmp	.+2      	; 0x316 <uart_putx+0x14>
 314:	89 5c       	subi	r24, 0xC9	; 201
 316:	e4 df       	rcall	.-56     	; 0x2e0 <uart_putc>
  if(lb<= 9)uart_putc( lb+'0'); else uart_putc( lb+'A'-0x0A);
 318:	ca 30       	cpi	r28, 0x0A	; 10
 31a:	10 f4       	brcc	.+4      	; 0x320 <uart_putx+0x1e>
 31c:	80 e3       	ldi	r24, 0x30	; 48
 31e:	01 c0       	rjmp	.+2      	; 0x322 <uart_putx+0x20>
 320:	87 e3       	ldi	r24, 0x37	; 55
 322:	8c 0f       	add	r24, r28
}
 324:	cf 91       	pop	r28

void uart_putx( unsigned char x ){
  unsigned char lb = x & 0x0F;
  x >>=4;
  if(x <= 9)uart_putc( x+'0' ); else uart_putc( x+'A'-0x0A);
  if(lb<= 9)uart_putc( lb+'0'); else uart_putc( lb+'A'-0x0A);
 326:	dc cf       	rjmp	.-72     	; 0x2e0 <uart_putc>

00000328 <uart_poll>:
}

char uart_poll(){
  if( UCSRA & (1<<UDRE) ){
 328:	5d 9b       	sbis	0x0b, 5	; 11
 32a:	0b c0       	rjmp	.+22     	; 0x342 <uart_poll+0x1a>
  uart_rx.st=0; uart_rx.en=0; uart_tx.st=0; uart_tx.en=0;
  (void)UDR; //void reading UDR
}

unsigned char uart_size( uart_buffer *buf ){
  return ((buf->en - buf->st) & UART_MASK);
 32c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <uart_tx+0x1>
 330:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <uart_tx>
  if(lb<= 9)uart_putc( lb+'0'); else uart_putc( lb+'A'-0x0A);
}

char uart_poll(){
  if( UCSRA & (1<<UDRE) ){
    if( uart_size( &uart_tx ) != 0 )UDR = uart_buf_read( &uart_tx );
 334:	89 1b       	sub	r24, r25
 336:	8f 77       	andi	r24, 0x7F	; 127
 338:	21 f0       	breq	.+8      	; 0x342 <uart_poll+0x1a>
 33a:	88 e8       	ldi	r24, 0x88	; 136
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	a0 df       	rcall	.-192    	; 0x280 <uart_buf_read>
 340:	8c b9       	out	0x0c, r24	; 12
  }
  if( UCSRA & (1<<RXC) ){
 342:	5f 9b       	sbis	0x0b, 7	; 11
 344:	06 c0       	rjmp	.+12     	; 0x352 <uart_poll+0x2a>
    char temp=UDR;
 346:	6c b1       	in	r22, 0x0c	; 12
    uart_buf_write( &uart_rx, temp );
 348:	8a e0       	ldi	r24, 0x0A	; 10
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	ae df       	rcall	.-164    	; 0x2aa <uart_buf_write>
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	08 95       	ret
    return 1;
  }
  return 0;
 352:	80 e0       	ldi	r24, 0x00	; 0
}
 354:	08 95       	ret

00000356 <timer_init>:

uint16_t time_ms = 0;
uint16_t time_uled = 0;
uint16_t time_qled = 0;
void timer_init(){
  TCCR1A = (0<<WGM11 | 0<<WGM10); //WGM = 0100
 356:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = (0<<WGM13 | 1<<WGM12) | (0b001<<CS10);
 358:	89 e0       	ldi	r24, 0x09	; 9
 35a:	8e bd       	out	0x2e, r24	; 46
  OCR1A = ((F_CPU/1000) - 1); //1 kHz / 1ms
 35c:	8f e7       	ldi	r24, 0x7F	; 127
 35e:	9e e3       	ldi	r25, 0x3E	; 62
 360:	9b bd       	out	0x2b, r25	; 43
 362:	8a bd       	out	0x2a, r24	; 42
 364:	08 95       	ret

00000366 <timer_update>:
}
void timer_update(){
  if(! (TIFR & (1<<OCF1A)) )return;
 366:	08 b6       	in	r0, 0x38	; 56
 368:	04 fe       	sbrs	r0, 4
 36a:	20 c0       	rjmp	.+64     	; 0x3ac <timer_update+0x46>
  TIFR |= (1<<OCF1A);
 36c:	88 b7       	in	r24, 0x38	; 56
 36e:	80 61       	ori	r24, 0x10	; 16
 370:	88 bf       	out	0x38, r24	; 56
  time_ms++;
 372:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <time_ms>
 376:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <time_ms+0x1>
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <time_ms+0x1>
 380:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <time_ms>
  if(time_ms == time_uled)PORT_OFF(ULED);
 384:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <time_uled>
 388:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <time_uled+0x1>
 38c:	82 17       	cp	r24, r18
 38e:	93 07       	cpc	r25, r19
 390:	09 f4       	brne	.+2      	; 0x394 <timer_update+0x2e>
 392:	94 98       	cbi	0x12, 4	; 18
  if(time_ms == time_qled)PORT_OFF(QLED);
 394:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <time_ms>
 398:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <time_ms+0x1>
 39c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 3a0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	09 f4       	brne	.+2      	; 0x3ac <timer_update+0x46>
 3aa:	96 9a       	sbi	0x12, 6	; 18
 3ac:	08 95       	ret

000003ae <uled_on>:
}
void uled_on(){
  PORT_ON(ULED);
 3ae:	94 9a       	sbi	0x12, 4	; 18
  time_uled = time_ms + ULED_TIMEOUT_MS;
 3b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <time_ms>
 3b4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <time_ms+0x1>
 3b8:	8c 59       	subi	r24, 0x9C	; 156
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <time_uled+0x1>
 3c0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <time_uled>
 3c4:	08 95       	ret

000003c6 <qled_on>:
}
void qled_on(){
  PORT_ON(QLED);
 3c6:	96 98       	cbi	0x12, 6	; 18
  time_qled = time_ms + QLED_TIMEOUT_MS;
 3c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <time_ms>
 3cc:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <time_ms+0x1>
 3d0:	88 51       	subi	r24, 0x18	; 24
 3d2:	9c 4f       	sbci	r25, 0xFC	; 252
 3d4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 3d8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 3dc:	08 95       	ret

000003de <usbFunctionRead>:
static uchar    bytesRemaining;

/* usbFunctionRead() вызывается когда хост запрашивает порцию данных от устройства
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionRead(uchar *data, uchar len){
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	08 2f       	mov	r16, r24
 3ee:	d9 2e       	mov	r13, r25
  if(len > bytesRemaining)len = bytesRemaining;
 3f0:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <bytesRemaining>
 3f4:	6c 17       	cp	r22, r28
 3f6:	08 f4       	brcc	.+2      	; 0x3fa <usbFunctionRead+0x1c>
 3f8:	c6 2f       	mov	r28, r22
  
  if(!currentAddress){        // pdata<=???
 3fa:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <currentAddress>
 3fe:	81 11       	cpse	r24, r1
 400:	3f c0       	rjmp	.+126    	; 0x480 <__stack+0x21>
    buf[0] = report_id;
 402:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <report_id>
 406:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <buf>
    if(report_id == REPID_PORTS){
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	19 f4       	brne	.+6      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
      buf[1] = 0; //this mode is write-only
 40e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <buf+0x1>
 412:	29 c0       	rjmp	.+82     	; 0x466 <__stack+0x7>
    }else if(report_id == REPID_UART_CFG){
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	59 f4       	brne	.+22     	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 418:	e0 e6       	ldi	r30, 0x60	; 96
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ad e7       	ldi	r26, 0x7D	; 125
 41e:	b0 e0       	ldi	r27, 0x00	; 0
      for(uint8_t i=0; i<sizeof(uart_cfg); i++)buf[i] = ((uint8_t*)&uart_cfg)[i];
 420:	81 91       	ld	r24, Z+
 422:	8d 93       	st	X+, r24
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	e8 36       	cpi	r30, 0x68	; 104
 428:	f8 07       	cpc	r31, r24
 42a:	d1 f7       	brne	.-12     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 42c:	1c c0       	rjmp	.+56     	; 0x466 <__stack+0x7>
    }else{
      uint8_t uart_count = report_id - REPID_UART_0;
 42e:	dd ef       	ldi	r29, 0xFD	; 253
 430:	d8 0f       	add	r29, r24
 432:	8e e7       	ldi	r24, 0x7E	; 126
 434:	e8 2e       	mov	r14, r24
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	f8 2e       	mov	r15, r24
      for(uint8_t i=0; i<uart_count; i++){
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	1d 17       	cp	r17, r29
 43e:	98 f4       	brcc	.+38     	; 0x466 <__stack+0x7>
  uart_rx.st=0; uart_rx.en=0; uart_tx.st=0; uart_tx.en=0;
  (void)UDR; //void reading UDR
}

unsigned char uart_size( uart_buffer *buf ){
  return ((buf->en - buf->st) & UART_MASK);
 440:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <uart_rx+0x1>
 444:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <uart_rx>
        if(uart_is_empty()){
 448:	89 1b       	sub	r24, r25
 44a:	8f 77       	andi	r24, 0x7F	; 127
 44c:	21 f4       	brne	.+8      	; 0x456 <__DATA_REGION_LENGTH__+0x56>
          buf[0] = i + REPID_UART_0;
 44e:	1d 5f       	subi	r17, 0xFD	; 253
 450:	10 93 7d 00 	sts	0x007D, r17	; 0x80007d <buf>
          break;
 454:	08 c0       	rjmp	.+16     	; 0x466 <__stack+0x7>
        }
        buf[i+1] = uart_getc();
 456:	8a e0       	ldi	r24, 0x0A	; 10
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	12 df       	rcall	.-476    	; 0x280 <uart_buf_read>
 45c:	f7 01       	movw	r30, r14
 45e:	81 93       	st	Z+, r24
 460:	7f 01       	movw	r14, r30
      buf[1] = 0; //this mode is write-only
    }else if(report_id == REPID_UART_CFG){
      for(uint8_t i=0; i<sizeof(uart_cfg); i++)buf[i] = ((uint8_t*)&uart_cfg)[i];
    }else{
      uint8_t uart_count = report_id - REPID_UART_0;
      for(uint8_t i=0; i<uart_count; i++){
 462:	1f 5f       	subi	r17, 0xFF	; 255
 464:	eb cf       	rjmp	.-42     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
          break;
        }
        buf[i+1] = uart_getc();
      }
    }
    if(buf[0] == REPID_UART_0){
 466:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <buf>
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	49 f4       	brne	.+18     	; 0x480 <__stack+0x21>
 46e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <uart_tx+0x1>
 472:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <uart_tx>
      buf[1] = uart_free(); //free space in TX buffer
 476:	89 1b       	sub	r24, r25
 478:	80 95       	com	r24
 47a:	8f 77       	andi	r24, 0x7F	; 127
 47c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <buf+0x1>
    }
  }
  uchar j;
  for(j=0; j<len; j++)data[j] = buf[j+currentAddress];
 480:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <currentAddress>
 484:	a8 2f       	mov	r26, r24
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	a3 58       	subi	r26, 0x83	; 131
 48a:	bf 4f       	sbci	r27, 0xFF	; 255
 48c:	20 2f       	mov	r18, r16
 48e:	e0 2f       	mov	r30, r16
 490:	fd 2d       	mov	r31, r13
 492:	9e 2f       	mov	r25, r30
 494:	92 1b       	sub	r25, r18
 496:	9c 17       	cp	r25, r28
 498:	18 f4       	brcc	.+6      	; 0x4a0 <__stack+0x41>
 49a:	9d 91       	ld	r25, X+
 49c:	91 93       	st	Z+, r25
 49e:	f9 cf       	rjmp	.-14     	; 0x492 <__stack+0x33>
  
  currentAddress += len;
 4a0:	8c 0f       	add	r24, r28
 4a2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <currentAddress>
  bytesRemaining -= len;
 4a6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <bytesRemaining>
 4aa:	8c 1b       	sub	r24, r28
 4ac:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <bytesRemaining>
  return len;
}
 4b0:	8c 2f       	mov	r24, r28
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	08 95       	ret

000004c2 <usbFunctionWrite>:

/* usbFunctionWrite() вызывается когда хост отправляет порцию данных к устройству
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionWrite(uchar *data, uchar len){
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
  if(bytesRemaining == 0)return 1;
 4ca:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <bytesRemaining>
 4ce:	22 23       	and	r18, r18
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <usbFunctionWrite+0x12>
 4d2:	9c c0       	rjmp	.+312    	; 0x60c <usbFunctionWrite+0x14a>
 4d4:	32 2f       	mov	r19, r18
 4d6:	62 17       	cp	r22, r18
 4d8:	08 f4       	brcc	.+2      	; 0x4dc <usbFunctionWrite+0x1a>
 4da:	36 2f       	mov	r19, r22
  
  if(len > bytesRemaining)len = bytesRemaining;
     
  uchar j;
  for(j=0; j<len; j++)buf[j+currentAddress] = data[j];
 4dc:	40 91 87 00 	lds	r20, 0x0087	; 0x800087 <currentAddress>
 4e0:	58 2f       	mov	r21, r24
 4e2:	a4 2f       	mov	r26, r20
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	a3 58       	subi	r26, 0x83	; 131
 4e8:	bf 4f       	sbci	r27, 0xFF	; 255
 4ea:	fc 01       	movw	r30, r24
 4ec:	8e 2f       	mov	r24, r30
 4ee:	85 1b       	sub	r24, r21
 4f0:	83 17       	cp	r24, r19
 4f2:	18 f4       	brcc	.+6      	; 0x4fa <usbFunctionWrite+0x38>
 4f4:	81 91       	ld	r24, Z+
 4f6:	8d 93       	st	X+, r24
 4f8:	f9 cf       	rjmp	.-14     	; 0x4ec <usbFunctionWrite+0x2a>
  
  currentAddress += len;
 4fa:	43 0f       	add	r20, r19
 4fc:	40 93 87 00 	sts	0x0087, r20	; 0x800087 <currentAddress>
  bytesRemaining -= len;
 500:	23 1b       	sub	r18, r19
 502:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <bytesRemaining>
  
  if(bytesRemaining == 0){     // ???<=pdata
 506:	21 11       	cpse	r18, r1
 508:	7a c0       	rjmp	.+244    	; 0x5fe <usbFunctionWrite+0x13c>
    if(report_id == REPID_PORTS){
 50a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <report_id>
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	09 f0       	breq	.+2      	; 0x514 <usbFunctionWrite+0x52>
 512:	4a c0       	rjmp	.+148    	; 0x5a8 <usbFunctionWrite+0xe6>
      char let = buf[1] & 0xF0;
 514:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <buf+0x1>
 518:	98 2f       	mov	r25, r24
 51a:	90 7f       	andi	r25, 0xF0	; 240
      char bits = buf[1];
      if(let == 0xA0){ //VportA
 51c:	90 3a       	cpi	r25, 0xA0	; 160
 51e:	a9 f4       	brne	.+42     	; 0x54a <usbFunctionWrite+0x88>
        Vport_out(A, bits);
 520:	80 ff       	sbrs	r24, 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <usbFunctionWrite+0x66>
 524:	c0 9a       	sbi	0x18, 0	; 24
 526:	01 c0       	rjmp	.+2      	; 0x52a <usbFunctionWrite+0x68>
 528:	c0 98       	cbi	0x18, 0	; 24
 52a:	81 ff       	sbrs	r24, 1
 52c:	02 c0       	rjmp	.+4      	; 0x532 <usbFunctionWrite+0x70>
 52e:	c1 9a       	sbi	0x18, 1	; 24
 530:	01 c0       	rjmp	.+2      	; 0x534 <usbFunctionWrite+0x72>
 532:	c1 98       	cbi	0x18, 1	; 24
 534:	82 ff       	sbrs	r24, 2
 536:	02 c0       	rjmp	.+4      	; 0x53c <usbFunctionWrite+0x7a>
 538:	c2 9a       	sbi	0x18, 2	; 24
 53a:	01 c0       	rjmp	.+2      	; 0x53e <usbFunctionWrite+0x7c>
 53c:	c2 98       	cbi	0x18, 2	; 24
 53e:	83 ff       	sbrs	r24, 3
 540:	02 c0       	rjmp	.+4      	; 0x546 <usbFunctionWrite+0x84>
 542:	c3 9a       	sbi	0x18, 3	; 24
 544:	2f c0       	rjmp	.+94     	; 0x5a4 <usbFunctionWrite+0xe2>
 546:	c3 98       	cbi	0x18, 3	; 24
 548:	2d c0       	rjmp	.+90     	; 0x5a4 <usbFunctionWrite+0xe2>
      }else if(let == 0xB0){ //VportB
 54a:	90 3b       	cpi	r25, 0xB0	; 176
 54c:	a9 f4       	brne	.+42     	; 0x578 <usbFunctionWrite+0xb6>
        Vport_out(B, bits);
 54e:	80 ff       	sbrs	r24, 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <usbFunctionWrite+0x94>
 552:	c4 9a       	sbi	0x18, 4	; 24
 554:	01 c0       	rjmp	.+2      	; 0x558 <usbFunctionWrite+0x96>
 556:	c4 98       	cbi	0x18, 4	; 24
 558:	81 ff       	sbrs	r24, 1
 55a:	02 c0       	rjmp	.+4      	; 0x560 <usbFunctionWrite+0x9e>
 55c:	c5 9a       	sbi	0x18, 5	; 24
 55e:	01 c0       	rjmp	.+2      	; 0x562 <usbFunctionWrite+0xa0>
 560:	c5 98       	cbi	0x18, 5	; 24
 562:	82 ff       	sbrs	r24, 2
 564:	02 c0       	rjmp	.+4      	; 0x56a <usbFunctionWrite+0xa8>
 566:	a8 9a       	sbi	0x15, 0	; 21
 568:	01 c0       	rjmp	.+2      	; 0x56c <usbFunctionWrite+0xaa>
 56a:	a8 98       	cbi	0x15, 0	; 21
 56c:	83 ff       	sbrs	r24, 3
 56e:	02 c0       	rjmp	.+4      	; 0x574 <usbFunctionWrite+0xb2>
 570:	a9 9a       	sbi	0x15, 1	; 21
 572:	18 c0       	rjmp	.+48     	; 0x5a4 <usbFunctionWrite+0xe2>
 574:	a9 98       	cbi	0x15, 1	; 21
 576:	16 c0       	rjmp	.+44     	; 0x5a4 <usbFunctionWrite+0xe2>
      }else if(let == 0xC0){ //VportC
 578:	90 3c       	cpi	r25, 0xC0	; 192
 57a:	a1 f4       	brne	.+40     	; 0x5a4 <usbFunctionWrite+0xe2>
        Vport_out(C, bits);
 57c:	80 ff       	sbrs	r24, 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <usbFunctionWrite+0xc2>
 580:	aa 9a       	sbi	0x15, 2	; 21
 582:	01 c0       	rjmp	.+2      	; 0x586 <usbFunctionWrite+0xc4>
 584:	aa 98       	cbi	0x15, 2	; 21
 586:	81 ff       	sbrs	r24, 1
 588:	02 c0       	rjmp	.+4      	; 0x58e <usbFunctionWrite+0xcc>
 58a:	ab 9a       	sbi	0x15, 3	; 21
 58c:	01 c0       	rjmp	.+2      	; 0x590 <usbFunctionWrite+0xce>
 58e:	ab 98       	cbi	0x15, 3	; 21
 590:	82 ff       	sbrs	r24, 2
 592:	02 c0       	rjmp	.+4      	; 0x598 <usbFunctionWrite+0xd6>
 594:	ac 9a       	sbi	0x15, 4	; 21
 596:	01 c0       	rjmp	.+2      	; 0x59a <usbFunctionWrite+0xd8>
 598:	ac 98       	cbi	0x15, 4	; 21
 59a:	83 ff       	sbrs	r24, 3
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <usbFunctionWrite+0xe0>
 59e:	ad 9a       	sbi	0x15, 5	; 21
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <usbFunctionWrite+0xe2>
 5a2:	ad 98       	cbi	0x15, 5	; 21
      }
      qled_on();
 5a4:	10 df       	rcall	.-480    	; 0x3c6 <qled_on>
 5a6:	2b c0       	rjmp	.+86     	; 0x5fe <usbFunctionWrite+0x13c>
    }else if(report_id == REPID_UART_CFG){
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	d9 f4       	brne	.+54     	; 0x5e2 <usbFunctionWrite+0x120>
 5ac:	ed e7       	ldi	r30, 0x7D	; 125
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	a0 e6       	ldi	r26, 0x60	; 96
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	85 e8       	ldi	r24, 0x85	; 133
 5b6:	90 e0       	ldi	r25, 0x00	; 0
      for(uint8_t i=0; i<sizeof(uart_cfg); i++)((uint8_t*)&uart_cfg)[i] = buf[i];
 5b8:	21 91       	ld	r18, Z+
 5ba:	2d 93       	st	X+, r18
 5bc:	8e 17       	cp	r24, r30
 5be:	9f 07       	cpc	r25, r31
 5c0:	d9 f7       	brne	.-10     	; 0x5b8 <usbFunctionWrite+0xf6>
      uart_config(uart_cfg.baudrate, uart_cfg.stopbits, uart_cfg.parity, uart_cfg.wordsize);
 5c2:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5c6:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5ca:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 5ce:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 5d2:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 5d6:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 5da:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 5de:	ed dd       	rcall	.-1062   	; 0x1ba <uart_config>
 5e0:	0e c0       	rjmp	.+28     	; 0x5fe <usbFunctionWrite+0x13c>
    }else{
      uint8_t uart_count = report_id - REPID_UART_0;
 5e2:	cd ef       	ldi	r28, 0xFD	; 253
 5e4:	c8 0f       	add	r28, r24
 5e6:	0e e7       	ldi	r16, 0x7E	; 126
 5e8:	10 e0       	ldi	r17, 0x00	; 0
      for(uint8_t i=0; i<uart_count; i++)uart_putc(buf[i+1]);
 5ea:	d0 e0       	ldi	r29, 0x00	; 0
 5ec:	dc 17       	cp	r29, r28
 5ee:	30 f4       	brcc	.+12     	; 0x5fc <usbFunctionWrite+0x13a>
 5f0:	f8 01       	movw	r30, r16
 5f2:	81 91       	ld	r24, Z+
 5f4:	8f 01       	movw	r16, r30
 5f6:	74 de       	rcall	.-792    	; 0x2e0 <uart_putc>
 5f8:	df 5f       	subi	r29, 0xFF	; 255
 5fa:	f8 cf       	rjmp	.-16     	; 0x5ec <usbFunctionWrite+0x12a>
      uled_on();
 5fc:	d8 de       	rcall	.-592    	; 0x3ae <uled_on>
    }
  }
  return bytesRemaining == 0; /* 0 означает, что есть еще данные */
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <bytesRemaining>
 604:	99 23       	and	r25, r25
 606:	19 f0       	breq	.+6      	; 0x60e <usbFunctionWrite+0x14c>
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	01 c0       	rjmp	.+2      	; 0x60e <usbFunctionWrite+0x14c>

/* usbFunctionWrite() вызывается когда хост отправляет порцию данных к устройству
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionWrite(uchar *data, uchar len){
  if(bytesRemaining == 0)return 1;
 60c:	81 e0       	ldi	r24, 0x01	; 1
      for(uint8_t i=0; i<uart_count; i++)uart_putc(buf[i+1]);
      uled_on();
    }
  }
  return bytesRemaining == 0; /* 0 означает, что есть еще данные */
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8]){
 618:	fc 01       	movw	r30, r24
 usbRequest_t    *rq = (void *)data;

 if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID устройство */
 61a:	80 81       	ld	r24, Z
 61c:	80 76       	andi	r24, 0x60	; 96
 61e:	80 32       	cpi	r24, 0x20	; 32
 620:	a1 f4       	brne	.+40     	; 0x64a <usbFunctionSetup+0x32>
   if(rq->bRequest == USBRQ_HID_GET_REPORT){
 622:	81 81       	ldd	r24, Z+1	; 0x01
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	11 f0       	breq	.+4      	; 0x62c <usbFunctionSetup+0x14>
     report_id = (rq->wValue.word)&0xFF;
     bytesRemaining = rep_size[report_id];
     currentAddress = 0;
     return USB_NO_MSG;  // используем usbFunctionRead() для отправки данных хосту
   }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
 628:	89 30       	cpi	r24, 0x09	; 9
 62a:	79 f4       	brne	.+30     	; 0x64a <usbFunctionSetup+0x32>
      report_id = (rq->wValue.word)&0xFF;
 62c:	82 81       	ldd	r24, Z+2	; 0x02
 62e:	93 81       	ldd	r25, Z+3	; 0x03
 630:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <report_id>
     bytesRemaining = rep_size[report_id];
 634:	99 27       	eor	r25, r25
 636:	fc 01       	movw	r30, r24
 638:	e6 59       	subi	r30, 0x96	; 150
 63a:	ff 4f       	sbci	r31, 0xFF	; 255
 63c:	80 81       	ld	r24, Z
 63e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <bytesRemaining>
     currentAddress = 0;
 642:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <currentAddress>
     return USB_NO_MSG;  // используем usbFunctionWrite() для получения данных от хоста
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	08 95       	ret
   }
  }else{
// остальные запросы мы просто игнорируем
  }
  return 0;
 64a:	80 e0       	ldi	r24, 0x00	; 0
}
 64c:	08 95       	ret

0000064e <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 64e:	cf 93       	push	r28
 650:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 652:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <usbTxStatus1>
 656:	24 ff       	sbrs	r18, 4
 658:	0b c0       	rjmp	.+22     	; 0x670 <usbSetInterrupt+0x22>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 65a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <usbTxStatus1+0x1>
 65e:	28 e8       	ldi	r18, 0x88	; 136
 660:	23 27       	eor	r18, r19
 662:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <usbTxStatus1+0x1>
 666:	fc 01       	movw	r30, r24
 668:	aa e9       	ldi	r26, 0x9A	; 154
 66a:	b1 e0       	ldi	r27, 0x01	; 1
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 66c:	8c 2f       	mov	r24, r28
 66e:	04 c0       	rjmp	.+8      	; 0x678 <usbSetInterrupt+0x2a>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 670:	2a e5       	ldi	r18, 0x5A	; 90
 672:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <usbTxStatus1>
 676:	f7 cf       	rjmp	.-18     	; 0x666 <usbSetInterrupt+0x18>
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 678:	91 91       	ld	r25, Z+
 67a:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 67c:	81 50       	subi	r24, 0x01	; 1
 67e:	e1 f7       	brne	.-8      	; 0x678 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 680:	6c 2f       	mov	r22, r28
 682:	8a e9       	ldi	r24, 0x9A	; 154
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	5e d1       	rcall	.+700    	; 0x944 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 688:	cc 5f       	subi	r28, 0xFC	; 252
 68a:	c0 93 98 01 	sts	0x0198, r28	; 0x800198 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 696:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <usbRxLen>
 69a:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 69c:	67 fd       	sbrc	r22, 7
 69e:	c3 c0       	rjmp	.+390    	; 0x826 <usbPoll+0x194>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6a0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <usbInputBufOffset>
 6a4:	cc e0       	ldi	r28, 0x0C	; 12
 6a6:	d0 e0       	ldi	r29, 0x00	; 0
 6a8:	c8 1b       	sub	r28, r24
 6aa:	d1 09       	sbc	r29, r1
 6ac:	c3 55       	subi	r28, 0x53	; 83
 6ae:	de 4f       	sbci	r29, 0xFE	; 254
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 6b0:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <usbRxToken>
 6b4:	8d 32       	cpi	r24, 0x2D	; 45
 6b6:	09 f0       	breq	.+2      	; 0x6ba <usbPoll+0x28>
 6b8:	a5 c0       	rjmp	.+330    	; 0x804 <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 6ba:	68 30       	cpi	r22, 0x08	; 8
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <usbPoll+0x2e>
 6be:	b1 c0       	rjmp	.+354    	; 0x822 <usbPoll+0x190>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 6c0:	83 ec       	ldi	r24, 0xC3	; 195
 6c2:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 6c6:	8a e5       	ldi	r24, 0x5A	; 90
 6c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <usbTxLen>
        usbMsgFlags = 0;
 6cc:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 6d0:	88 81       	ld	r24, Y
 6d2:	80 76       	andi	r24, 0x60	; 96
 6d4:	31 f0       	breq	.+12     	; 0x6e2 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
 6d6:	ce 01       	movw	r24, r28
 6d8:	9f df       	rcall	.-194    	; 0x618 <usbFunctionSetup>
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 6da:	8f 3f       	cpi	r24, 0xFF	; 255
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <usbPoll+0x4e>
 6de:	81 c0       	rjmp	.+258    	; 0x7e2 <usbPoll+0x150>
 6e0:	87 c0       	rjmp	.+270    	; 0x7f0 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 6e2:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 6e4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 6e8:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 6ea:	81 11       	cpse	r24, r1
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <usbPoll+0x68>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 6ee:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <usbTxBuf+0xa>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 6f2:	26 e9       	ldi	r18, 0x96	; 150
 6f4:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	6f c0       	rjmp	.+222    	; 0x7d8 <usbPoll+0x146>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 6fa:	85 30       	cpi	r24, 0x05	; 5
 6fc:	19 f4       	brne	.+6      	; 0x704 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 6fe:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <usbNewDeviceAddr>
 702:	67 c0       	rjmp	.+206    	; 0x7d2 <usbPoll+0x140>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 704:	86 30       	cpi	r24, 0x06	; 6
 706:	09 f0       	breq	.+2      	; 0x70a <usbPoll+0x78>
 708:	4e c0       	rjmp	.+156    	; 0x7a6 <usbPoll+0x114>
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	41 f4       	brne	.+16     	; 0x720 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 710:	88 e3       	ldi	r24, 0x38	; 56
 712:	91 e0       	ldi	r25, 0x01	; 1
 714:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <usbMsgPtr+0x1>
 718:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <usbMsgPtr>
 71c:	82 e1       	ldi	r24, 0x12	; 18
 71e:	3f c0       	rjmp	.+126    	; 0x79e <usbPoll+0x10c>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 720:	82 30       	cpi	r24, 0x02	; 2
 722:	41 f4       	brne	.+16     	; 0x734 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 724:	86 e1       	ldi	r24, 0x16	; 22
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <usbMsgPtr+0x1>
 72c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <usbMsgPtr>
 730:	82 e2       	ldi	r24, 0x22	; 34
 732:	35 c0       	rjmp	.+106    	; 0x79e <usbPoll+0x10c>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 734:	83 30       	cpi	r24, 0x03	; 3
 736:	f1 f4       	brne	.+60     	; 0x774 <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 738:	91 11       	cpse	r25, r1
 73a:	08 c0       	rjmp	.+16     	; 0x74c <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 73c:	8e e7       	ldi	r24, 0x7E	; 126
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <usbMsgPtr+0x1>
 744:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <usbMsgPtr>
 748:	84 e0       	ldi	r24, 0x04	; 4
 74a:	29 c0       	rjmp	.+82     	; 0x79e <usbPoll+0x10c>
        SWITCH_CASE(1)
 74c:	91 30       	cpi	r25, 0x01	; 1
 74e:	41 f4       	brne	.+16     	; 0x760 <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 750:	88 e6       	ldi	r24, 0x68	; 104
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <usbMsgPtr+0x1>
 758:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <usbMsgPtr>
 75c:	86 e1       	ldi	r24, 0x16	; 22
 75e:	1f c0       	rjmp	.+62     	; 0x79e <usbPoll+0x10c>
        SWITCH_CASE(2)
 760:	92 30       	cpi	r25, 0x02	; 2
 762:	e1 f4       	brne	.+56     	; 0x79c <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 764:	8a e4       	ldi	r24, 0x4A	; 74
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <usbMsgPtr+0x1>
 76c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <usbMsgPtr>
 770:	8e e1       	ldi	r24, 0x1E	; 30
 772:	15 c0       	rjmp	.+42     	; 0x79e <usbPoll+0x10c>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 774:	81 32       	cpi	r24, 0x21	; 33
 776:	41 f4       	brne	.+16     	; 0x788 <usbPoll+0xf6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 778:	88 e2       	ldi	r24, 0x28	; 40
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <usbMsgPtr+0x1>
 780:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <usbMsgPtr>
 784:	89 e0       	ldi	r24, 0x09	; 9
 786:	0b c0       	rjmp	.+22     	; 0x79e <usbPoll+0x10c>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 788:	82 32       	cpi	r24, 0x22	; 34
 78a:	41 f4       	brne	.+16     	; 0x79c <usbPoll+0x10a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 78c:	86 e2       	ldi	r24, 0x26	; 38
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <usbMsgPtr+0x1>
 794:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <usbMsgPtr>
 798:	80 ef       	ldi	r24, 0xF0	; 240
 79a:	01 c0       	rjmp	.+2      	; 0x79e <usbPoll+0x10c>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 79c:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 79e:	90 e4       	ldi	r25, 0x40	; 64
 7a0:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <usbMsgFlags>
 7a4:	25 c0       	rjmp	.+74     	; 0x7f0 <usbPoll+0x15e>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 7a6:	88 30       	cpi	r24, 0x08	; 8
 7a8:	69 f0       	breq	.+26     	; 0x7c4 <usbPoll+0x132>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 7aa:	89 30       	cpi	r24, 0x09	; 9
 7ac:	19 f4       	brne	.+6      	; 0x7b4 <usbPoll+0x122>
        usbConfiguration = value;
 7ae:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <usbConfiguration>
 7b2:	0f c0       	rjmp	.+30     	; 0x7d2 <usbPoll+0x140>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 7b4:	8a 30       	cpi	r24, 0x0A	; 10
 7b6:	49 f0       	breq	.+18     	; 0x7ca <usbPoll+0x138>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 7b8:	8b 30       	cpi	r24, 0x0B	; 11
 7ba:	59 f4       	brne	.+22     	; 0x7d2 <usbPoll+0x140>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 7bc:	8b e4       	ldi	r24, 0x4B	; 75
 7be:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <usbTxStatus1+0x1>
 7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <usbPoll+0x140>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 7c4:	2c ea       	ldi	r18, 0xAC	; 172
 7c6:	31 e0       	ldi	r19, 0x01	; 1
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <usbPoll+0x13c>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 7ca:	26 e9       	ldi	r18, 0x96	; 150
 7cc:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <usbPoll+0x146>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 7d2:	26 e9       	ldi	r18, 0x96	; 150
 7d4:	31 e0       	ldi	r19, 0x01	; 1
 7d6:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 7d8:	30 93 a8 01 	sts	0x01A8, r19	; 0x8001a8 <usbMsgPtr+0x1>
 7dc:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <usbMsgPtr>
 7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <usbPoll+0x15e>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 7e2:	98 81       	ld	r25, Y
 7e4:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 7e6:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 7e8:	90 e8       	ldi	r25, 0x80	; 128
 7ea:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <usbMsgFlags>
 7ee:	07 c0       	rjmp	.+14     	; 0x7fe <usbPoll+0x16c>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 7f0:	9f 81       	ldd	r25, Y+7	; 0x07
 7f2:	91 11       	cpse	r25, r1
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <usbPoll+0x16c>
 7f6:	9e 81       	ldd	r25, Y+6	; 0x06
 7f8:	98 17       	cp	r25, r24
 7fa:	08 f4       	brcc	.+2      	; 0x7fe <usbPoll+0x16c>
 7fc:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 7fe:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbMsgLen>
 802:	0f c0       	rjmp	.+30     	; 0x822 <usbPoll+0x190>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 804:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <usbMsgFlags>
 808:	87 ff       	sbrs	r24, 7
 80a:	0b c0       	rjmp	.+22     	; 0x822 <usbPoll+0x190>
            uchar rval = usbFunctionWrite(data, len);
 80c:	ce 01       	movw	r24, r28
 80e:	59 de       	rcall	.-846    	; 0x4c2 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 810:	8f 3f       	cpi	r24, 0xFF	; 255
 812:	21 f4       	brne	.+8      	; 0x81c <usbPoll+0x18a>
                usbTxLen = USBPID_STALL;
 814:	8e e1       	ldi	r24, 0x1E	; 30
 816:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <usbTxLen>
 81a:	03 c0       	rjmp	.+6      	; 0x822 <usbPoll+0x190>
            }else if(rval != 0){    /* This was the final package */
 81c:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 81e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 822:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 826:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <usbTxLen>
 82a:	84 ff       	sbrs	r24, 4
 82c:	55 c0       	rjmp	.+170    	; 0x8d8 <usbPoll+0x246>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 82e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <usbMsgLen>
 832:	8f 3f       	cpi	r24, 0xFF	; 255
 834:	09 f4       	brne	.+2      	; 0x838 <usbPoll+0x1a6>
 836:	50 c0       	rjmp	.+160    	; 0x8d8 <usbPoll+0x246>
 838:	c8 2f       	mov	r28, r24
 83a:	89 30       	cpi	r24, 0x09	; 9
 83c:	08 f0       	brcs	.+2      	; 0x840 <usbPoll+0x1ae>
 83e:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 840:	8c 1b       	sub	r24, r28
 842:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 846:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <usbTxBuf>
 84a:	88 e8       	ldi	r24, 0x88	; 136
 84c:	89 27       	eor	r24, r25
 84e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <usbTxBuf>
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 852:	cc 23       	and	r28, r28
 854:	09 f4       	brne	.+2      	; 0x858 <usbPoll+0x1c6>
 856:	4b c0       	rjmp	.+150    	; 0x8ee <usbPoll+0x25c>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 858:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <usbMsgFlags>
 85c:	27 ff       	sbrs	r18, 7
 85e:	08 c0       	rjmp	.+16     	; 0x870 <usbPoll+0x1de>
            len = usbFunctionRead(data, len);
 860:	6c 2f       	mov	r22, r28
 862:	8e e8       	ldi	r24, 0x8E	; 142
 864:	91 e0       	ldi	r25, 0x01	; 1
 866:	bb dd       	rcall	.-1162   	; 0x3de <usbFunctionRead>
 868:	c8 2f       	mov	r28, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 86a:	89 30       	cpi	r24, 0x09	; 9
 86c:	78 f5       	brcc	.+94     	; 0x8cc <usbPoll+0x23a>
 86e:	23 c0       	rjmp	.+70     	; 0x8b6 <usbPoll+0x224>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 870:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <usbMsgPtr>
 874:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 878:	26 ff       	sbrs	r18, 6
 87a:	0a c0       	rjmp	.+20     	; 0x890 <usbPoll+0x1fe>
 87c:	ae e8       	ldi	r26, 0x8E	; 142
 87e:	b1 e0       	ldi	r27, 0x01	; 1
 880:	fc 01       	movw	r30, r24
 882:	2c 2f       	mov	r18, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 884:	34 91       	lpm	r19, Z
                    *data++ = c;
 886:	3d 93       	st	X+, r19
                    r++;
 888:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 88a:	21 50       	subi	r18, 0x01	; 1
 88c:	d9 f7       	brne	.-10     	; 0x884 <usbPoll+0x1f2>
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <usbPoll+0x20e>
 890:	dc 01       	movw	r26, r24
 892:	ee e8       	ldi	r30, 0x8E	; 142
 894:	f1 e0       	ldi	r31, 0x01	; 1
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 896:	2c 2f       	mov	r18, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 898:	3d 91       	ld	r19, X+
 89a:	31 93       	st	Z+, r19
                }while(--i);
 89c:	21 50       	subi	r18, 0x01	; 1
 89e:	e1 f7       	brne	.-8      	; 0x898 <usbPoll+0x206>
 8a0:	2f ef       	ldi	r18, 0xFF	; 255
 8a2:	2c 0f       	add	r18, r28
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	2f 5f       	subi	r18, 0xFF	; 255
 8a8:	3f 4f       	sbci	r19, 0xFF	; 255
 8aa:	82 0f       	add	r24, r18
 8ac:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 8ae:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <usbMsgPtr+0x1>
 8b2:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 8b6:	6c 2f       	mov	r22, r28
 8b8:	8e e8       	ldi	r24, 0x8E	; 142
 8ba:	91 e0       	ldi	r25, 0x01	; 1
 8bc:	43 d0       	rcall	.+134    	; 0x944 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 8be:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 8c0:	cc 30       	cpi	r28, 0x0C	; 12
 8c2:	41 f0       	breq	.+16     	; 0x8d4 <usbPoll+0x242>
            usbMsgLen = USB_NO_MSG;
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbMsgLen>
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <usbPoll+0x242>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 8cc:	8f ef       	ldi	r24, 0xFF	; 255
 8ce:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 8d2:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 8d4:	c0 93 69 00 	sts	0x0069, r28	; 0x800069 <usbTxLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 8d8:	84 e1       	ldi	r24, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 8da:	90 b3       	in	r25, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 8dc:	9c 70       	andi	r25, 0x0C	; 12
 8de:	69 f4       	brne	.+26     	; 0x8fa <usbPoll+0x268>
 8e0:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 8e2:	d9 f7       	brne	.-10     	; 0x8da <usbPoll+0x248>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 8e4:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 8e8:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <usbPoll+0x268>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	8e e8       	ldi	r24, 0x8E	; 142
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	27 d0       	rcall	.+78     	; 0x944 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 8f6:	c4 e0       	ldi	r28, 0x04	; 4
 8f8:	e5 cf       	rjmp	.-54     	; 0x8c4 <usbPoll+0x232>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	08 95       	ret

00000900 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 900:	85 b7       	in	r24, 0x35	; 53
 902:	82 60       	ori	r24, 0x02	; 2
 904:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 906:	8b b7       	in	r24, 0x3b	; 59
 908:	80 64       	ori	r24, 0x40	; 64
 90a:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 90c:	e8 e9       	ldi	r30, 0x98	; 152
 90e:	f1 e0       	ldi	r31, 0x01	; 1
 910:	8b e4       	ldi	r24, 0x4B	; 75
 912:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 914:	8a e5       	ldi	r24, 0x5A	; 90
 916:	80 83       	st	Z, r24
 918:	08 95       	ret

0000091a <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 91a:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 91c:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 91e:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 920:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 922:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 924:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 926:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 928:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 92a:	09 c0       	rjmp	.+18     	; 0x93e <usbCrcLoopEntry>

0000092c <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 92c:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 92e:	82 27       	eor	r24, r18

00000930 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 930:	97 95       	ror	r25
    ror     resCrcL
 932:	87 95       	ror	r24
    brcs    usbCrcNoXor
 934:	10 f0       	brcs	.+4      	; 0x93a <usbCrcNoXor>
    eor     resCrcL, polyL
 936:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 938:	95 27       	eor	r25, r21

0000093a <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 93a:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 93c:	c8 f3       	brcs	.-14     	; 0x930 <usbCrcBitLoop>

0000093e <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 93e:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 940:	a8 f3       	brcs	.-22     	; 0x92c <usbCrcByteLoop>

00000942 <usbCrcReady>:
usbCrcReady:
    ret
 942:	08 95       	ret

00000944 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 944:	ea df       	rcall	.-44     	; 0x91a <usbCrc16>
    st      ptr+, resCrcL
 946:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 948:	9d 93       	st	X+, r25
    ret
 94a:	08 95       	ret

0000094c <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 94c:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 94e:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 950:	cf 93       	push	r28
    push    YH                  ;[-20]
 952:	df 93       	push	r29

00000954 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 954:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 956:	83 9b       	sbis	0x10, 3	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 958:	e9 f7       	brne	.-6      	; 0x954 <waitForJ>

0000095a <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 95a:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK              ;[-14]
 95c:	0b c0       	rjmp	.+22     	; 0x974 <foundK>
    sbis    USBIN, USBMINUS
 95e:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 960:	09 c0       	rjmp	.+18     	; 0x974 <foundK>
    sbis    USBIN, USBMINUS
 962:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 964:	07 c0       	rjmp	.+14     	; 0x974 <foundK>
    sbis    USBIN, USBMINUS
 966:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 968:	05 c0       	rjmp	.+10     	; 0x974 <foundK>
    sbis    USBIN, USBMINUS
 96a:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 96c:	03 c0       	rjmp	.+6      	; 0x974 <foundK>
    sbis    USBIN, USBMINUS
 96e:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 970:	01 c0       	rjmp	.+2      	; 0x974 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 972:	8b c0       	rjmp	.+278    	; 0xa8a <sofError>

00000974 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 974:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 976:	c0 91 a6 01 	lds	r28, 0x01A6	; 0x8001a6 <usbInputBufOffset>
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 97a:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 97c:	c3 55       	subi	r28, 0x53	; 83
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 97e:	de 4f       	sbci	r29, 0xFE	; 254
    push    shift               ;[-5]
 980:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 982:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 984:	83 9b       	sbis	0x10, 3	; 16
    rjmp    haveTwoBitsK        ;[-1]
 986:	03 c0       	rjmp	.+6      	; 0x98e <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 988:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 98a:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 98c:	e6 cf       	rjmp	.-52     	; 0x95a <waitForK>

0000098e <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 98e:	0f 93       	push	r16
    push    x2              ;[3]
 990:	1f 93       	push	r17
    push    x3              ;[5]
 992:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 994:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 996:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 998:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 99a:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK     ;[12]
 99c:	0c 70       	andi	r16, 0x0C	; 12
    bst     x1, USBMINUS    ;[13]
 99e:	03 fb       	bst	r16, 3
    bld     shift, 7        ;[14]
 9a0:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 9a2:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 9a4:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 9a6:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 9a8:	39 c0       	rjmp	.+114    	; 0xa1c <rxbit1>

000009aa <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 9aa:	1c 70       	andi	r17, 0x0C	; 12
    ori     x3, 1<<6    ;[04] will not be shifted any more
 9ac:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 9ae:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 9b0:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 9b2:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 9b4:	1e c0       	rjmp	.+60     	; 0x9f2 <didUnstuff6>

000009b6 <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 9b6:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 9b8:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 9ba:	1c 70       	andi	r17, 0x0C	; 12
    andi    shift, ~0x80;[02]
 9bc:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 9be:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 9c0:	1f c0       	rjmp	.+62     	; 0xa00 <didUnstuff7>

000009c2 <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 9c2:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 9c4:	00 b3       	in	r16, 0x10	; 16
    andi    shift, ~0x80;[01]
 9c6:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 9c8:	0c 70       	andi	r16, 0x0C	; 12
    breq    se0         ;[03]
 9ca:	d1 f1       	breq	.+116    	; 0xa40 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 9cc:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 9d0:	23 c0       	rjmp	.+70     	; 0xa18 <didUnstuffE>

000009d2 <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 9d2:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 9d4:	10 b3       	in	r17, 0x10	; 16
    andi    shift, ~0x80;[01]
 9d6:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 9d8:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;[03]
 9da:	91 f1       	breq	.+100    	; 0xa40 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 9dc:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 9de:	00 c0       	rjmp	.+0      	; 0x9e0 <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 9e0:	25 c0       	rjmp	.+74     	; 0xa2c <didUnstuffO>

000009e2 <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 9e2:	0c 70       	andi	r16, 0x0C	; 12
    eor     x2, x1      ;[04]
 9e4:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 9e6:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 9e8:	12 f4       	brpl	.+4      	; 0x9ee <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 9ea:	5d 5f       	subi	r21, 0xFD	; 253
	...

000009ee <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 9ee:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 9f0:	27 95       	ror	r18

000009f2 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 9f2:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 9f4:	10 b3       	in	r17, 0x10	; 16
    brcc    unstuff6    ;[01]
 9f6:	c8 f6       	brcc	.-78     	; 0x9aa <unstuff6>
    andi    x2, USBMASK ;[02]
 9f8:	1c 70       	andi	r17, 0x0C	; 12
    eor     x1, x2      ;[03]
 9fa:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 9fc:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 9fe:	27 95       	ror	r18

00000a00 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 a00:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 a02:	c8 f6       	brcc	.-78     	; 0x9b6 <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 a04:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 a06:	49 93       	st	Y+, r20

00000a08 <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 a08:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK ;[01]
 a0a:	0c 70       	andi	r16, 0x0C	; 12
    eor     x2, x1      ;[02]
 a0c:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 a0e:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 a10:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 a12:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 a14:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 a16:	a8 f6       	brcc	.-86     	; 0x9c2 <unstuffEven>

00000a18 <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 a18:	46 95       	lsr	r20
    lsr     x3          ;[09]
 a1a:	46 95       	lsr	r20

00000a1c <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 a1c:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 a1e:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;[02]
 a20:	79 f0       	breq	.+30     	; 0xa40 <se0>
    eor     x1, x2      ;[03]
 a22:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 a24:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 a26:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 a28:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 a2a:	98 f6       	brcc	.-90     	; 0x9d2 <unstuffOdd>

00000a2c <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 a2c:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 a2e:	60 f3       	brcs	.-40     	; 0xa08 <rxBitLoop>

    subi    cnt, 1      ;[10]
 a30:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 a32:	00 b3       	in	r16, 0x10	; 16
    brcc    rxByteLoop  ;[01]
 a34:	b0 f6       	brcc	.-84     	; 0x9e2 <rxByteLoop>
    rjmp    overflow
 a36:	00 c0       	rjmp	.+0      	; 0xa38 <overflow>

00000a38 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 a38:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 a3a:	1a bf       	out	0x3a, r17	; 58

00000a3c <ignorePacket>:
ignorePacket:
    clr     token
 a3c:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 a3e:	19 c0       	rjmp	.+50     	; 0xa72 <handleSetupOrOut>

00000a40 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 a40:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 a42:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 a44:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 a46:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 a48:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 a4a:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 a4c:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 a4e:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 a50:	09 f1       	breq	.+66     	; 0xa94 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 a52:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 a54:	f9 f0       	breq	.+62     	; 0xa94 <handleData>
    lds     shift, usbDeviceAddr;[17]
 a56:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 a5a:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 a5c:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 a5e:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 a60:	ed cf       	rjmp	.-38     	; 0xa3c <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 a62:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 a64:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 a66:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 a68:	51 f1       	breq	.+84     	; 0xabe <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 a6a:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 a6c:	11 f0       	breq	.+4      	; 0xa72 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 a6e:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 a70:	29 f7       	brne	.-54     	; 0xa3c <ignorePacket>

00000a72 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 a72:	00 93 ab 01 	sts	0x01AB, r16	; 0x8001ab <usbCurrentTok>

00000a76 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 a76:	3f 91       	pop	r19
 a78:	5f 91       	pop	r21
 a7a:	4f 91       	pop	r20
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	2f 91       	pop	r18
 a82:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 a84:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 a86:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 a88:	65 cf       	rjmp	.-310    	; 0x954 <waitForJ>

00000a8a <sofError>:
sofError:
    POP_RETI                    ;macro call
 a8a:	df 91       	pop	r29
 a8c:	cf 91       	pop	r28
 a8e:	cf bf       	out	0x3f, r28	; 63
 a90:	cf 91       	pop	r28
    reti
 a92:	18 95       	reti

00000a94 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 a94:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <usbCurrentTok>
    tst     shift               ;[20]
 a98:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 a9a:	69 f3       	breq	.-38     	; 0xa76 <doReturn>
    lds     x2, usbRxLen        ;[22]
 a9c:	10 91 a9 01 	lds	r17, 0x01A9	; 0x8001a9 <usbRxLen>
    tst     x2                  ;[24]
 aa0:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 aa2:	91 f5       	brne	.+100    	; 0xb08 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 aa4:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 aa6:	92 f1       	brmi	.+100    	; 0xb0c <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 aa8:	30 93 a9 01 	sts	0x01A9, r19	; 0x8001a9 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 aac:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 ab0:	10 91 a6 01 	lds	r17, 0x01A6	; 0x8001a6 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 ab4:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 ab6:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 ab8:	30 93 a6 01 	sts	0x01A6, r19	; 0x8001a6 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 abc:	27 c0       	rjmp	.+78     	; 0xb0c <sendAckAndReti>

00000abe <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 abe:	00 91 a9 01 	lds	r16, 0x01A9	; 0x8001a9 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 ac2:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 ac4:	0c f5       	brge	.+66     	; 0xb08 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 ac6:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 ac8:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 aca:	49 f4       	brne	.+18     	; 0xade <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 acc:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 ad0:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 ad2:	1d c0       	rjmp	.+58     	; 0xb0e <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 ad4:	00 93 69 00 	sts	0x0069, r16	; 0x800069 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 ad8:	cd e8       	ldi	r28, 0x8D	; 141
    ldi     YH, hi8(usbTxBuf)   ;[44]
 ada:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 adc:	1c c0       	rjmp	.+56     	; 0xb16 <usbSendAndReti>

00000ade <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 ade:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 ae2:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 ae4:	14 c0       	rjmp	.+40     	; 0xb0e <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 ae6:	00 93 98 01 	sts	0x0198, r16	; 0x800198 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 aea:	c9 e9       	ldi	r28, 0x99	; 153
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 aec:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 aee:	13 c0       	rjmp	.+38     	; 0xb16 <usbSendAndReti>

00000af0 <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 af0:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 af2:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 af4:	00 c0       	rjmp	.+0      	; 0xaf6 <bitstuffN+0x6>
    nop                     ;[9]
 af6:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 af8:	02 bb       	out	0x12, r16	; 18
    rjmp    didStuffN       ;[0]
 afa:	1a c0       	rjmp	.+52     	; 0xb30 <didStuffN>

00000afc <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 afc:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 afe:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 b00:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 b02:	1d c0       	rjmp	.+58     	; 0xb3e <didStuff6>

00000b04 <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 b04:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 b06:	21 c0       	rjmp	.+66     	; 0xb4a <didStuff7>

00000b08 <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 b08:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <sendX3AndReti>

00000b0c <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 b0c:	32 ed       	ldi	r19, 0xD2	; 210

00000b0e <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 b0e:	43 2f       	mov	r20, r19

00000b10 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 b10:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 b12:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 b14:	32 e0       	ldi	r19, 0x02	; 2

00000b16 <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 b16:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK     ;[-11]
 b18:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 b1a:	93 9a       	sbi	0x12, 3	; 18
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 b1c:	02 b3       	in	r16, 0x12	; 18
    out     USBDDR, x2      ;[-7] <- acquire bus
 b1e:	11 bb       	out	0x11, r17	; 17
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 b20:	5c e0       	ldi	r21, 0x0C	; 12
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 b22:	20 e8       	ldi	r18, 0x80	; 128

00000b24 <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 b24:	65 e3       	ldi	r22, 0x35	; 53

00000b26 <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 b26:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 b28:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 b2a:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 b2c:	27 95       	ror	r18
    ror     x2              ;[1]
 b2e:	17 95       	ror	r17

00000b30 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 b30:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 b32:	f0 f6       	brcc	.-68     	; 0xaf0 <bitstuffN>
    lsr     bitcnt          ;[4]
 b34:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 b36:	b8 f7       	brcc	.-18     	; 0xb26 <txBitLoop>
    brne    txBitLoop       ;[6]
 b38:	b1 f7       	brne	.-20     	; 0xb26 <txBitLoop>

    sbrs    shift, 0        ;[7]
 b3a:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 b3c:	05 27       	eor	r16, r21

00000b3e <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 b3e:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 b40:	27 95       	ror	r18
    ror     x2              ;[1]
 b42:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 b44:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 b46:	d0 f6       	brcc	.-76     	; 0xafc <bitstuff6>
    ror     shift           ;[4]
 b48:	27 95       	ror	r18

00000b4a <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 b4a:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 b4c:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 b4e:	05 27       	eor	r16, r21
    nop                     ;[8]
 b50:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 b52:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 b54:	02 bb       	out	0x12, r16	; 18
    brcc    bitstuff7       ;[0] [11]
 b56:	b0 f6       	brcc	.-84     	; 0xb04 <bitstuff7>
    ld      shift, y+       ;[1]
 b58:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 b5a:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 b5c:	19 f7       	brne	.-58     	; 0xb24 <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 b5e:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[6]
 b60:	10 91 aa 01 	lds	r17, 0x01AA	; 0x8001aa <usbNewDeviceAddr>
    lsl     x2              ;[8] we compare with left shifted address
 b64:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 b66:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 b68:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 b6a:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 b6c:	11 f0       	breq	.+4      	; 0xb72 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 b6e:	10 93 a4 01 	sts	0x01A4, r17	; 0x8001a4 <usbDeviceAddr>

00000b72 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 b72:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[3]
 b74:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[4]
 b76:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR      ;[5]
 b78:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK     ;[6] set both pins to input
 b7a:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1          ;[7]
 b7c:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 b7e:	43 7f       	andi	r20, 0xF3	; 243
    ldi     x4, 4           ;[9]
 b80:	54 e0       	ldi	r21, 0x04	; 4

00000b82 <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 b82:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 b84:	f1 f7       	brne	.-4      	; 0xb82 <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 b86:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2      ;[22] <-- release bus now
 b88:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 b8a:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 b8c:	74 cf       	rjmp	.-280    	; 0xa76 <doReturn>

00000b8e <main>:
/* ------------------------------------------------------------------------- */

int main(void){
  cli();
 b8e:	f8 94       	cli
 
  usbInit();
 b90:	b7 de       	rcall	.-658    	; 0x900 <usbInit>
  usbDeviceDisconnect();
 b92:	8b 9a       	sbi	0x11, 3	; 17

  uart_init(9600);
 b94:	60 e8       	ldi	r22, 0x80	; 128
 b96:	75 e2       	ldi	r23, 0x25	; 37
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	52 db       	rcall	.-2396   	; 0x242 <uart_init>
  timer_init();
 b9e:	db db       	rcall	.-2122   	; 0x356 <timer_init>
  DDR_1(ULED); PORT_ON(ULED);
 ba0:	8c 9a       	sbi	0x11, 4	; 17
 ba2:	94 9a       	sbi	0x12, 4	; 18
  DDR_1(QLED); PORT_OFF(QLED);
 ba4:	8e 9a       	sbi	0x11, 6	; 17
 ba6:	96 9a       	sbi	0x12, 6	; 18
  Vport_init(A);
 ba8:	c0 98       	cbi	0x18, 0	; 24
 baa:	b8 9a       	sbi	0x17, 0	; 23
 bac:	c1 98       	cbi	0x18, 1	; 24
 bae:	b9 9a       	sbi	0x17, 1	; 23
 bb0:	c2 98       	cbi	0x18, 2	; 24
 bb2:	ba 9a       	sbi	0x17, 2	; 23
 bb4:	c3 98       	cbi	0x18, 3	; 24
 bb6:	bb 9a       	sbi	0x17, 3	; 23
  Vport_init(B);
 bb8:	c4 98       	cbi	0x18, 4	; 24
 bba:	bc 9a       	sbi	0x17, 4	; 23
 bbc:	c5 98       	cbi	0x18, 5	; 24
 bbe:	bd 9a       	sbi	0x17, 5	; 23
 bc0:	a8 98       	cbi	0x15, 0	; 21
 bc2:	a0 9a       	sbi	0x14, 0	; 20
 bc4:	a9 98       	cbi	0x15, 1	; 21
 bc6:	a1 9a       	sbi	0x14, 1	; 20
  Vport_init(C);
 bc8:	aa 98       	cbi	0x15, 2	; 21
 bca:	a2 9a       	sbi	0x14, 2	; 20
 bcc:	ab 98       	cbi	0x15, 3	; 21
 bce:	a3 9a       	sbi	0x14, 3	; 20
 bd0:	ac 98       	cbi	0x15, 4	; 21
 bd2:	a4 9a       	sbi	0x14, 4	; 20
 bd4:	ad 98       	cbi	0x15, 5	; 21
 bd6:	a5 9a       	sbi	0x14, 5	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bd8:	2f ef       	ldi	r18, 0xFF	; 255
 bda:	83 ed       	ldi	r24, 0xD3	; 211
 bdc:	90 e3       	ldi	r25, 0x30	; 48
 bde:	21 50       	subi	r18, 0x01	; 1
 be0:	80 40       	sbci	r24, 0x00	; 0
 be2:	90 40       	sbci	r25, 0x00	; 0
 be4:	e1 f7       	brne	.-8      	; 0xbde <main+0x50>
 be6:	00 c0       	rjmp	.+0      	; 0xbe8 <main+0x5a>
 be8:	00 00       	nop

  _delay_ms(1000);
  
  PORT_OFF(ULED);
 bea:	94 98       	cbi	0x12, 4	; 18
    
  usbDeviceConnect();
 bec:	8b 98       	cbi	0x11, 3	; 17
  sei();
 bee:	78 94       	sei

  for(;;){
    usbPoll();
 bf0:	50 dd       	rcall	.-1376   	; 0x692 <usbPoll>
    if(uart_poll())uled_on();
 bf2:	9a db       	rcall	.-2252   	; 0x328 <uart_poll>
 bf4:	81 11       	cpse	r24, r1
 bf6:	db db       	rcall	.-2122   	; 0x3ae <uled_on>
    timer_update();
 bf8:	b6 db       	rcall	.-2196   	; 0x366 <timer_update>
  }
 bfa:	fa cf       	rjmp	.-12     	; 0xbf0 <main+0x62>

00000bfc <__udivmodsi4>:
 bfc:	a1 e2       	ldi	r26, 0x21	; 33
 bfe:	1a 2e       	mov	r1, r26
 c00:	aa 1b       	sub	r26, r26
 c02:	bb 1b       	sub	r27, r27
 c04:	fd 01       	movw	r30, r26
 c06:	0d c0       	rjmp	.+26     	; 0xc22 <__udivmodsi4_ep>

00000c08 <__udivmodsi4_loop>:
 c08:	aa 1f       	adc	r26, r26
 c0a:	bb 1f       	adc	r27, r27
 c0c:	ee 1f       	adc	r30, r30
 c0e:	ff 1f       	adc	r31, r31
 c10:	a2 17       	cp	r26, r18
 c12:	b3 07       	cpc	r27, r19
 c14:	e4 07       	cpc	r30, r20
 c16:	f5 07       	cpc	r31, r21
 c18:	20 f0       	brcs	.+8      	; 0xc22 <__udivmodsi4_ep>
 c1a:	a2 1b       	sub	r26, r18
 c1c:	b3 0b       	sbc	r27, r19
 c1e:	e4 0b       	sbc	r30, r20
 c20:	f5 0b       	sbc	r31, r21

00000c22 <__udivmodsi4_ep>:
 c22:	66 1f       	adc	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	99 1f       	adc	r25, r25
 c2a:	1a 94       	dec	r1
 c2c:	69 f7       	brne	.-38     	; 0xc08 <__udivmodsi4_loop>
 c2e:	60 95       	com	r22
 c30:	70 95       	com	r23
 c32:	80 95       	com	r24
 c34:	90 95       	com	r25
 c36:	9b 01       	movw	r18, r22
 c38:	ac 01       	movw	r20, r24
 c3a:	bd 01       	movw	r22, r26
 c3c:	cf 01       	movw	r24, r30
 c3e:	08 95       	ret

00000c40 <_exit>:
 c40:	f8 94       	cli

00000c42 <__stop_program>:
 c42:	ff cf       	rjmp	.-2      	; 0xc42 <__stop_program>
